
o	Analyze the time complexity of each operation (add, search, traverse, delete).
Ans->
Add Employee:
Time Complexity: O(1) (amortized, if space is available)
Explanation: Simply adds an employee at the next available index.

Search Employee:
Time Complexity: O(n)
Explanation: Requires checking each element until the desired employee is found.

Traverse Employees:
Time Complexity: O(n)
Explanation: Must visit each employee in the array to print or access their details.

Delete Employee:
Time Complexity: O(n)
Explanation: Requires searching for the employee, and then potentially shifting elements to maintain continuity.

o	Discuss the limitations of arrays and when to use them.
Ans->
Limitations of Arrays
Fixed Size: Once an array is created, its size cannot be changed. This can lead to wasted space or the need to create a new array if more space is required.
Inefficient Deletion and Insertion: Inserting or deleting elements (other than at the end) requires shifting elements, which can be inefficient.
Lack of Built-in Methods: Unlike higher-level data structures (like lists or maps), arrays do not provide built-in methods for insertion, deletion, or searching.
When to Use Arrays
Use arrays when:
The number of elements is known and fixed.
Fast access to elements by index is required.
Memory efficiency is a priority.
For dynamic datasets where the number of elements fluctuates, consider using data structures like ArrayList or LinkedList.
